// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=ad824a76d3

*/

// ********RoostGPT********
const express = require("express");
const path = require("path");
const request = require("supertest");

// Since app.js and test file are in the same folder according to task description
jest.mock("./app", () => {
  const express = require("express");
  const app = express();
  // Mock the express static middleware to always return index.html for any path
  app.use(express.static(path.join(__dirname, 'public'), { index: 'index.html' }));
  return app;
});
const app = require("./app");

describe("app.js serving frontend", () => {
  test("GET /* should serve the frontend index.html", async () => {
    const response = await request(app).get("/any-path");
    expect(response.status).toBe(200);
    expect(response.type).toBe("text/html");
    expect(response.text).toMatch(/^<!DOCTYPE html>/i); // assuming index.html starts with <!DOCTYPE html>
  });

  test("GET /* should return the same frontend index.html for different paths", async () => {
    const response1 = await request(app).get("/different-path");
    const response2 = await request(app).get("/another-path");
    expect(response1.text).toEqual(response2.text);
  });

  test("GET /* should handle non-existing paths and still return index.html", async () => {
    const response = await request(app).get("/non-existing-path");
    expect(response.status).toBe(200);
    expect(response.type).toBe("text/html");
    expect(response.text).toMatch(/^<!DOCTYPE html>/i);
  });

  // Additional tests for edge cases and error handling can be added here if needed
});

