// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=68185b8774
ROOST_METHOD_SIG_HASH=916750d805


*/

// ********RoostGPT********
const Joi = require("joi"); // Updated Joi import statement

// Define the login validation schema using Joi
const loginSchema = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().min(6).required()
});

// Define the login validation function
const loginValidation = (data) => {
  return loginSchema.validate(data);
};

// Export the validation function
module.exports = { loginValidation };

// Jest Test Cases
describe("Login Validation", () => {
  let validData;

  beforeEach(() => {
    // Set up valid data before each test
    validData = {
      email: "example@example.com",
      password: "password123"
    };
  });

  // Success case
  test("should validate a correct email and password", () => {
    const result = loginValidation(validData);
    expect(result.error).toBeUndefined();
    expect(result.value).toEqual(validData);
  });

  // Failure cases: Email
  test("should return an error if email is not provided", () => {
    const { email, ...dataWithoutEmail } = validData;
    const result = loginValidation(dataWithoutEmail);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].message).toMatch(/email/);
  });

  test("should return an error if email is not valid", () => {
    validData.email = "notavalidemail";
    const result = loginValidation(validData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].message).toMatch(/email/);
  });

  test("should return an error if email is too short", () => {
    validData.email = "e@i.o";
    const result = loginValidation(validData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].message).toMatch(/email/);
  });

  // Failure case: Password
  test("should return an error if password is not provided", () => {
    const { password, ...dataWithoutPassword } = validData;
    const result = loginValidation(dataWithoutPassword);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].message).toMatch(/password/);
  });

  test("should return an error if password is too short", () => {
    validData.password = "123";
    const result = loginValidation(validData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].message).toMatch(/password/);
  });

  // Edge case: Additional properties
  test("should ignore additional properties", () => {
    validData.unexpectedField = "unexpected";
    const result = loginValidation(validData);
    expect(result.error).toBeUndefined();
    delete validData.unexpectedField;
    expect(result.value).toEqual(validData);
  });
});

