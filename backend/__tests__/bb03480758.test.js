// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=9bf30f90a9

*/

// ********RoostGPT********
const Joi = require("@hapi/joi");
const { registerValidation } = require("../validation");

describe('registerValidation', () => {
  let userData;

  beforeEach(() => {
    // Setup data for each test to ensure tests are independent
    userData = {
      name: "TestUser",
      email: "test@example.com",
      password: "password123"
    };
  });

  test('should validate a correct user data object', () => {
    const result = registerValidation(userData);
    expect(result.error).toBeUndefined();
  });

  test('should return an error if name is too short', () => {
    userData.name = "Tu";
    const result = registerValidation(userData);
    expect(result.error.details[0].message).toContain('"name" length must be at least 6 characters long');
  });

  test('should return an error if email is not valid', () => {
    userData.email = "testmail";
    const result = registerValidation(userData);
    expect(result.error.details[0].message).toContain('"email" must be a valid email');
  });

  test('should return an error if password is too short', () => {
    userData.password = "pass";
    const result = registerValidation(userData);
    expect(result.error.details[0].message).toContain('"password" length must be at least 6 characters long');
  });

  test('should return an error if name is missing', () => {
    delete userData.name;
    const result = registerValidation(userData);
    expect(result.error.details[0].message).toContain('"name" is required');
  });

  test('should return an error if email is missing', () => {
    delete userData.email;
    const result = registerValidation(userData);
    expect(result.error.details[0].message).toContain('"email" is required');
  });

  test('should return an error if password is missing', () => {
    delete userData.password;
    const result = registerValidation(userData);
    expect(result.error.details[0].message).toContain('"password" is required');
  });

  // Additional test cases can be added as needed to cover more scenarios or edge cases
});

