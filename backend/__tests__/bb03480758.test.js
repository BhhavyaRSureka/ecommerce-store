// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=9bf30f90a9

*/

// ********RoostGPT********
const Joi = require("@hapi/joi");
const validation = require("../validation");

describe('Registration Validation', () => {
  let data;

  beforeEach(() => {
    data = {
      name: 'ValidName',
      email: 'valid@example.com',
      password: 'validpassword'
    };
  });

  test('should validate a correct user object', () => {
    const schema = Joi.object({
      name: Joi.string().min(6).required(),
      email: Joi.string().email().required(),
      password: Joi.string().min(6).required()
    });
    
    const { error } = schema.validate(data);
    expect(error).toBeUndefined();
  });

  test('should invalidate a user object with a name shorter than 6 characters', () => {
    data.name = 'abc';
    const schema = Joi.object({
      name: Joi.string().min(6).required(),
      email: Joi.string().email().required(),
      password: Joi.string().min(6).required()
    });
    
    const { error } = schema.validate(data);
    expect(error).toBeDefined();
    expect(error.details[0].message).toMatch(/"name" length must be at least 6 characters long/);
  });

  test('should invalidate a user object with an email without correct format', () => {
    data.email = 'invalid-email';
    const schema = Joi.object({
      name: Joi.string().min(6).required(),
      email: Joi.string().email().required(),
      password: Joi.string().min(6).required()
    });
    
    const { error } = schema.validate(data);
    expect(error).toBeDefined();
    expect(error.details[0].message).toMatch(/"email" must be a valid email/);
  });

  test('should invalidate a user object without a password', () => {
    data.password = '';
    const schema = Joi.object({
      name: Joi.string().min(6).required(),
      email: Joi.string().email().required(),
      password: Joi.string().min(6).required()
    });
    
    const { error } = schema.validate(data);
    expect(error).toBeDefined();
    expect(error.details[0].message).toMatch(/"password" is not allowed to be empty/);
  });

  test('should invalidate a user object with a password shorter than 6 characters', () => {
    data.password = '123';
    const schema = Joi.object({
      name: Joi.string().min(6).required(),
      email: Joi.string().email().required(),
      password: Joi.string().min(6).required()
    });
    
    const { error } = schema.validate(data);
    expect(error).toBeDefined();
    expect(error.details[0].message).toMatch(/"password" length must be at least 6 characters long/);
  });

  // More tests could be added to cover other edge cases and inputs
});

