// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=9bf30f90a9

*/

// ********RoostGPT********
const Joi = require("@hapi/joi");
const { registerValidation } = require("../validation");

describe('registerValidation Tests', () => {
  let validData;

  beforeAll(() => {
    validData = {
      name: "Example User",
      email: "user@example.com",
      password: "password123"
    };
  });

  it('should validate a correct object', () => {
    const { error } = registerValidation(validData);
    expect(error).toBeFalsy();
  });

  it('should fail validation when name is too short', () => {
    validData.name = "Ex";
    const { error } = registerValidation(validData);
    expect(error).toBeTruthy();
    expect(error.details[0].path[0]).toBe("name");
  });

  it('should fail validation when email is not valid', () => {
    validData.email = "user";
    const { error } = registerValidation(validData);
    expect(error).toBeTruthy();
    expect(error.details[0].path[0]).toBe("email");
  });

  it('should fail validation when password is too short', () => {
    validData.password = "pass";
    const { error } = registerValidation(validData);
    expect(error).toBeTruthy();
    expect(error.details[0].path[0]).toBe("password");
  });

  it('should fail validation when name is missing', () => {
    const { name, ...rest } = validData;
    const { error } = registerValidation(rest);
    expect(error).toBeTruthy();
    expect(error.details[0].path[0]).toBe("name");
  });

  it('should fail validation when email is missing', () => {
    const { email, ...rest } = validData;
    const { error } = registerValidation(rest);
    expect(error).toBeTruthy();
    expect(error.details[0].path[0]).toBe("email");
  });

  it('should fail validation when password is missing', () => {
    const { password, ...rest } = validData;
    const { error } = registerValidation(rest);
    expect(error).toBeTruthy();
    expect(error.details[0].path[0]).toBe("password");
  });
});

