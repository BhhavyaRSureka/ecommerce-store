// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=9bf30f90a9
ROOST_METHOD_SIG_HASH=bb03480758


*/

// ********RoostGPT********
import { describe, beforeAll, beforeEach, afterAll, test, expect } from '@jest/globals';
import Joi from "@hapi/joi";
import registerValidation from "../validation";


describe('User Registration Validation', () => {
  let validData;

  beforeAll(() => {
    // Perform any one-time setup here
  });

  beforeEach(() => {
    // Reset validData before each test case
    validData = {
      name: "TestUser",
      email: "testuser@example.com",
      password: "password123"
    };
  });

  afterAll(() => {
    // Perform any one-time cleanup tasks
  });

  test('should validate a valid user', () => {
    const result = registerValidation(validData);
    expect(result.error).toBeUndefined();
  });

  test('should invalidate user with too short name', () => {
    validData.name = "Test"; // Less than 6 characters
    const result = registerValidation(validData);
    expect(result.error).toBeDefined();
  });

  test('should invalidate user with too short email', () => {
    validData.email = "a@b.c"; // Less than 6 characters
    const result = registerValidation(validData);
    expect(result.error).toBeDefined();
  });

  test('should invalidate user with invalid email format', () => {
    validData.email = "testuser.com"; // Missing @ symbol
    const result = registerValidation(validData);
    expect(result.error).toBeDefined();
  });

  test('should invalidate user with too short password', () => {
    validData.password = "pass"; // Less than 6 characters
    const result = registerValidation(validData);
    expect(result.error).toBeDefined();
  });

  test('should invalidate user without a name', () => {
    delete validData.name; // No name property
    const result = registerValidation(validData);
    expect(result.error).toBeDefined();
  });

  test('should invalidate user without an email', () => {
    delete validData.email; // No email property
    const result = registerValidation(validData);
    expect(result.error).toBeDefined();
  });

  test('should invalidate user without a password', () => {
    delete validData.password; // No password property
    const result = registerValidation(validData);
    expect(result.error).toBeDefined();
  });

  test('should handle null data input', () => {
    const result = registerValidation(null);
    expect(result.error).toBeDefined();
  });
});

