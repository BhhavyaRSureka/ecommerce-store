// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=68185b8774
ROOST_METHOD_SIG_HASH=916750d805


*/

// ********RoostGPT********
import os
import json

# Generate package.json with jest
package_json = {
    "name": "jest-test",
    "version": "1.0.0",
    "description": "Jest testing",
    "main": "index.js",
    "scripts": {
        "test": "jest"
    },
    "author": "",
    "license": "ISC",
    "devDependencies": {
        "jest": "^26.6.3",
        "@hapi/joi": "^17.1.1"
    }
}

# Write package.json to the current working directory
with open('/mnt/data/package.json', 'w') as package_file:
    json.dump(package_json, package_file)

# Content of validation.js with loginValidation function
validation_js_content = '''
const Joi = require("@hapi/joi");

const loginSchema = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().min(6).required()
});

function loginValidation(data) {
  return loginSchema.validate(data);
}

module.exports.loginValidation = loginValidation;
'''

# Write validation.js with login validation function to the current working directory
with open('/mnt/data/validation.js', 'w') as validation_file:
    validation_file.write(validation_js_content.strip())

# Content of the test case: login.test.js
test_case_content = '''
const Joi = require("@hapi/joi");
const { loginValidation } = require("./validation");

describe('Login Validation', () => {
  
  test('should validate a correct login object', () => {
    const loginData = {
      email: 'test@example.com',
      password: 'password123'
    };
    const result = loginValidation(loginData);
    expect(result.error).toBeUndefined();
  });

  test('should give an error for invalid email', () => {
    const loginData = {
      email: 'wrongemail',
      password: 'password123'
    };
    const result = loginValidation(loginData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].path[0]).toBe('email');
  });

  test('should give an error for password with length less than 6 characters', () => {
    const loginData = {
      email: 'test@example.com',
      password: 'pass'
    };
    const result = loginValidation(loginData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].path[0]).toBe('password');
  });

  test('should give an error for missing email', () => {
    const loginData = {
      password: 'password123'
    };
    const result = loginValidation(loginData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].path[0]).toBe('email');
  });

  test('should give an error for missing password', () => {
    const loginData = {
      email: 'test@example.com'
    };
    const result = loginValidation(loginData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].path[0]).toBe('password');
  });

  test('should give an error for empty login object', () => {
    const loginData = {};
    const result = loginValidation(loginData);
    expect(result.error).toBeDefined();
    expect(result.error.details[0].path[0]).toBe('email');
  });

  // Add more tests if necessary...

});

// Additional setup or teardown if necessary could go here...
'''

# Write the test case to the current working directory
with open('/mnt/data/login.test.js', 'w') as test_file:
    test_file.write(test_case_content.strip())

# Return the paths to package.json, validation.js, and login.test.js
'/mnt/data/package.json', '/mnt/data/validation.js', '/mnt/data/login.test.js'

