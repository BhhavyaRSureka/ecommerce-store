// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=ad824a76d3

*/

// ********RoostGPT********
const express = require("express");
const request = require("supertest");
const path = require("path");
const app = require("../app");
const jestMock = require('jest-mock');

describe("GET /* - Wildcard route for serving the React app's index.html", () => {

  afterEach(() => {
    jestMock.restoreAllMocks();
  });

  test("It should respond with the index.html file for any given route", async () => {
    const pathJoinSpy = jestMock.spyOn(path, "join").mockReturnValue("/absolute/path/to/frontend/build/index.html");

    await request(app)
      .get("/any/random/route")
      .expect("Content-Type", /html/)
      .expect(200)
      .then(response => {
        expect(response.text).toMatch(/<html.*>/); // Ensure it's an HTML doc
      });

    pathJoinSpy.mockRestore();
  });

  test("It should handle file system errors", async () => {
    const pathJoinSpy = jestMock.spyOn(path, "join").mockReturnValue("/absolute/path/to/frontend/build/index.html");
    const sendFileSpy = jestMock.spyOn(express.response, "sendFile").mockImplementation((_, __, callback) => {
      callback(new Error("Failed to send file due to file system error"));
    });

    await request(app)
      .get("/any/random/route")
      .expect(500)
      .then(response => {
        expect(response.text).toEqual("Failed to send file due to file system error");
      });

    pathJoinSpy.mockRestore();
    sendFileSpy.mockRestore();
  });
});

