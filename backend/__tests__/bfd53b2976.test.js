// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=57665a017e
ROOST_METHOD_SIG_HASH=bfd53b2976


*/

// ********RoostGPT********
const express = require('express');
const request = require('supertest');
const app = express();

// Middleware to test
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', '*');
  next();
});

app.get('/test-cors', (req, res) => {
  res.status(200).send('CORS enabled');
});

// Test suite
describe('CORS Middleware', () => {
  it('should have Access-Control-Allow-Origin header with value *', async () => {
    const res = await request(app).get('/test-cors');
    expect(res.headers['access-control-allow-origin']).toBe('*');
  });

  it('should have Access-Control-Allow-Headers header with value *', async () => {
    const res = await request(app).get('/test-cors');
    expect(res.headers['access-control-allow-headers']).toBe('*');
  });

  // Additional tests can be written below
});

// Jest setup to avoid 'jest' not recognized error
module.exports = app;

if (require.main === module) {
  const server = app.listen(3000, () => {
    console.log(`Test server running on port 3000`);
  });

  afterAll(() => {
    server.close();
  });
}

// Wrapping Jest execution with script to ensure it is recognized
if (process.env.NODE_ENV === 'test') {
  const jest = require('jest');

  jest.run();
}

