// ********RoostGPT********
// Test generated by RoostGPT for test ReactTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { shallow } from 'enzyme';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import toJson from 'enzyme-to-json';

// Since the test file is located in __tests__/frontend/src/components/cart-icon
// We need to adjust the import path for the CartIcon component
import CartIcon from '../../../../../../frontend/src/components/cart-icon/cart-icon.component';

describe('CartIcon component', () => {
  let wrapper;
  let mockToggleCartHidden;
  let store;
  const mockCartItemsCount = 5;

  beforeEach(() => {
    // Mock the toggleCartHidden function
    mockToggleCartHidden = jest.fn();

    // Create a store with necessary state for the test
    const mockReducer = (state = { cart: { cartItems: [] } }, action) => state;
    store = createStore(mockReducer);

    const mockProps = {
      toggleCartHidden: mockToggleCartHidden,
      cartItemsCount: mockCartItemsCount,
    };

    // Wrap the CartIcon component with a Redux Provider
    wrapper = shallow(
      <Provider store={store}>
        <CartIcon {...mockProps} />
      </Provider>
    );
  });

  test('renders CartIcon component without crashing', () => {
    expect(toJson(wrapper)).toMatchSnapshot();
  });

  test('displays the correct cartItemsCount', () => {
    // Check if the text of .item-count matches the cartItemsCount prop
    expect(wrapper.find('.item-count').text()).toBe(mockCartItemsCount.toString());
  });

  test('calls toggleCartHidden when cart icon is clicked', () => {
    // Simulate a click event on the cart icon
    wrapper.find('.cart-icon').simulate('click');
    expect(mockToggleCartHidden).toHaveBeenCalled();
  });

  test('maps state to props correctly', () => {
    // Since cartItemsCount prop is mapped from mapStateToProps
    // We need to simulate the state that would provide the cartItemsCount value
    const mockState = {
      cart: {
        cartItems: [/* mocked cart items */],
      },
    };
    const mappedProps = mapStateToProps(mockState);
    expect(mappedProps.cartItemsCount).toEqual(/* expected count from mocked cart items */);
  });
});

